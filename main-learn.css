* {
  /* border-top: 10px solid #1098ad; */
  margin: 0;
  padding: 0;
  /* ! we want  box-sizing: border-box to all every single elements on the page to remove the default behavior of the model box so universal selector is good to apply this
  * and we don't put it in body because box-sizing not inherit property 
  * like margin and padding we used to reset default of our page by browser and now with box-sizing: border-box we enable the better behavior of the box model on every single element
  ! and it's really important trick we should apply when code CSS because many CSS developers also apply this*/
  box-sizing: border-box;
}

/* PAGE SECTIONS */
body {
  color: #444;
  font-family: sans-serif;

  border-top: 10px solid #1098ad;
  position: relative;
}

.container {
  width: 1200px;
  /* margin-left: auto;
  margin-right: auto; */
  margin: 0 auto;
}

.main-header {
  background-color: #f7f7f7;
  /* padding: 20px;
  padding-left: 40px;
  padding-right: 40px; */
  padding: 20px 40px;
  margin-bottom: 60px;
  /* height: 80px; */
}

nav {
  font-size: 18px;
  /* text-align: center; */
}

article {
  margin-bottom: 60px;
}

.post-header {
  margin-bottom: 40px;
  /* position: relative; */
}

aside {
  background-color: #f7f7f7;
  border-top: 5px solid #1098ad;
  border-bottom: 5px solid #1098ad;
  /* padding-top: 50px;
  padding-bottom: 50px; */
  /* padding: 50px 0; */
  /* width: 500px; */
}

/* SMALLER ELEMENTS */
h1,
h2,
h3 {
  color: #1098ad;
}

h1 {
  font-size: 26px;
  text-transform: uppercase;
  font-style: italic;
}

h2 {
  font-size: 40px;
  margin-bottom: 30px;
}

h3 {
  font-size: 30px;
  margin-bottom: 20px;
  margin-top: 40px;
}

h4 {
  font-size: 20px;
  text-transform: uppercase;
  text-align: center;
}

p {
  font-size: 22px;
  line-height: 1.5;
  margin-bottom: 15px;
}

ul,
ol {
  margin-left: 50px;
  margin-bottom: 20px;
}

li {
  font-size: 20px;
  margin-bottom: 10px;
  /* display: inline; */
}

li:last-child {
  margin-bottom: 0;
}

/* footer p {
  font-size: 16px;
} */

/* article header p {
  font-style: italic;
} */

#author {
  font-style: italic;
  font-size: 18px;
}

#copyright {
  font-size: 16px;
}

.related-author {
  font-size: 18px;
  font-weight: bold;
}

/* ul {
  list-style: none;
} */

.related {
  list-style: none;
}

body {
  /* background-color: orangered; */
}

/* .first-li {
  font-weight: bold;
} */

li:first-child {
  font-weight: bold;
}

li:last-child {
  font-style: italic;
}

li:nth-child(even) {
  /* color: red; */
}

/* Misconception: this won't work! */
article p:first-child {
  color: red;
}

/* Styling links */
a:link {
  color: #1098ad;
  text-decoration: none;
}

a:visited {
  /* color: #777; */
  color: #1098ad;
}

a:hover {
  color: orangered;
  font-weight: bold;
  text-decoration: underline orangered;
}

a:active {
  background-color: black;
  font-style: italic;
}
/* LVHA */

.post-img {
  width: 100%;
  height: auto;
}

nav a:link {
  /* background-color: orangered;
  margin: 20px;
  padding: 20px;

  display: block; */

  margin-right: 30px;
  margin-top: 10px;
  display: inline-block;
}

nav a:link:last-child {
  margin-right: 0;
}

button {
  font-size: 22px;
  padding: 20px;
  cursor: pointer;

  position: absolute;
  /* top: 50px;
  left: 50px; */
  bottom: 50px;
  right: 50px;
}

h1::first-letter {
  font-style: normal;
  margin-right: 5px;
}

h3 + p::first-line {
  /* color: red; */
}

h2 {
  /* background-color: orange; */
  position: relative;
}

h2::before {
  content: "TOP";
  background-color: #ffe70e;
  color: #444;
  font-size: 16px;
  font-weight: bold;
  display: inline-block;
  padding: 5px 10px;
  position: absolute;
  top: -10px;
  right: -25px;
}

/* Resolving conflicts */
/* #copyright {
  color: red;
}

.copyright {
  color: blue;
}

.text {
  color: yellow;
}

footer p {
  color: green !important;
} */

/* nav a:link,
nav p {
  font-size: 18px;
} */

/* *FLOATS  */

/* * what i want now is put author text side by side with image but rember that the p element is block-level element so it always occupy all space around them so it can't like normalway 
* we can use display property to consvert this element to inline-block and manipulate with this
! but now we will use new way is use float
*/

/* * this layout here is very small with two element author-img and author text so it's very very small component layout right here */
.author-img {
  /* display: inline-block;
  * now we will use float
  * we have many value for float property and mainly we can use left, right or none */
  float: left;
  /* * now what is going to happen is that image is basically going to be taken outof the documents flow just like an absolutely positioned element
  * now the different here with float is that then all the other elements will basically float round it*/
  /* * and so let add some space with bottom element
  * and it really working
  * and with that we can see that floated element is still able to create some margins aroundit*/
  margin-bottom: 20px;
}

.author {
  /* * when we apply float, we use padding and it's not working why? no it is working but because now it's behind image when we set padding 10px but if we set bigger than image width it'll work like 100px */
  /* padding-left: 100px; */
  /* padding-top: 10px; */
  /* * perfect margin for space between element padding in this case only for test some thing */
  margin-top: 10px;
  /* * and now we will fix this error and do p element take a start in right of image not behind the image * we will also set fot it float property*/
  /* float: left; */
  /* * and float: left is set element to left side of parent container element
  * and if we set float:right it'll set element to right side of parent container element */
  /* float: right; */
  float: left;
  /* ! keep in mind that if we set space between elements we need to use margin not padding
  ! padding is use for create some spaces inside element, but when you use padding you can see some siuation it looks like margin but keep in mind that use margin for space between element */
  margin-left: 30px;
}
/*  * so now let test some thing interesting 
* we will use  float to float h1 element to left and nav element to right
! but it's really working good but we have some interesting*/
h1 {
  float: left;
}

nav {
  float: right;
}

/* ? CLEAR FLOATs */
/* * create another element and add it to header HTML then select this element and clear floats */
.clear {
  /* * we can use clear property to clear float
  * values we can use left right and both 
  * this case we have left and right float so we use both
  * and problem is solved
  * so back the past when we build all website using float
  * so images now that we had a row and in there we had four columns so we needed one element for each of these columns and we had them floated all side by side
  * then in that siuation the height of the row so of the parent elment of the four columns would collapse so then we would have to go in and create an empty div element in each of situations 
  * and that could happen like 10 or 20 times on a page and so that would nt=ot be useful at all and we also don't want our HTML messy with all these empty div and it's bad practice
  ! therefore we will go to other way which is called the clearfix hack and it use more in time we only have float to build layout
  ! notice that: now we have modern way to build layout but understand it also useful*/

  clear: both;
}

/* * Clearfix hack class
* the reason to more use clearfix hack that's exactly to avoid having these kind of empty divs
* so how it work? is that on the element that has the collapsed height we add a class which was usually called cleafix
* and in CSS we will select that and fix */
.clearfix::after {
  /* * with this we created new last child element which like the way we create div class clear in header container element*/
  content: "";
  clear: both;
  /* * remember that defauld pseudo element ::after and :: berfore is inline element 
  ! however clearing floats like this only really works on a block-level element*/
  display: block;
  /* * so now the problem will be fixed as well */
}

/* .container {
  width: 1200px;
} */

/* .container::after {
  content: "";
  display: block;
  clear: both;
} */

/* ! whenn we maipulate with box, especially big box we should set background for them why? to see the box easy and help us for building layouts 
* and before we use float we actually to change width of these two element if we want them side by side, because now we have article and aside is block element and it occupy 100% of the available width of the container
* so if we want them side by side each of them must have certain width
* when we defined container width we will set width for child container with the logic width to them can side by side*/
article {
  background-color: rebeccapurple;
  width: 825px;
  float: left;
}

/* article::after {
  content: "";
  clear: both;
  display: block;
} */

/* ? Box sizing Border Box
* now if we add some padding to this aside sidebar and if the width greater than 300px it'll not fit for this element can side by side with article and it'll move down to footer 
* and that's because the default of the box model: the width will caclulate by [ pading right + width +  pading left ]
* so the default of the box model is now not good in this case so we need to config and change default of box model*/
aside {
  /* background-color: #ffe70e; */
  float: right;
  width: 300px;
  padding: 50px 40px;
  /* * but we want set this box-sizing to bordor-box to all elements on our page  so how can we do that?
  * we will use universal selector */
  /* box-sizing: border-box; */
}

/* aside::after {
  content: "";
  clear: both;
  display: block;
} */
.related {
  margin-left: 0;
  margin-bottom: 0;
}

.related h4 {
  display: block;
  margin-bottom: 30px;
}

.related li {
  width: 220px;
  /* margin: 20px 0; */
  height: 100px;
  /* background-color: red; */
  /* vertical-align: middle; */
}

.related li img {
  background-color: hsl(188, 83%, 37%);
  /* margin-top: 5px; */
  float: left;
}
.related li a:link {
  background-color: #ffe70e;
  font-weight: bold;
  width: 125px;
  float: right;
  font-size: 17px;
}
.related li p {
  background-color: aquamarine;
  font-style: italic;
  font-weight: normal;
  width: 125px;
  float: right;
  font-size: 14px;
}

.related li::after {
  content: "";
  clear: both;
  display: block;
}

/* * because in this case we don't need float footer right because footer is always in end of part layout
* and because it doesn't floated so it's also on flow of the page so now we don't use clearfix cuz we still have footer element here and the height still normal and not collasped
* and we will clear floats in footer */
footer {
  /* width: 900px; */
  background-color: aqua;
  clear: both;
}
/* footer::after {
  content: "";
  clear: both;
  display: block;
} */

/* button {
  float: right;
}
button::after {
  content: "";
  display: block;
  clear: both;
} */
