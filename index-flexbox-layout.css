* {
  /* border-top: 10px solid #1098ad; */
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* PAGE SECTIONS */
body {
  color: #444;
  font-family: sans-serif;

  border-top: 10px solid #1098ad;
  position: relative;
}

.container {
  width: 1200px;
  /* margin-left: auto;
  margin-right: auto; */
  margin: 0 auto;
}

.main-header {
  background-color: #f7f7f7;
  /* padding: 20px;
  padding-left: 40px;
  padding-right: 40px; */
  padding: 20px 40px;
  margin-bottom: 60px;
  /* height: 80px; */
}

nav {
  font-size: 18px;
  /* text-align: center; */
}

article {
  margin-bottom: 60px;
}

.post-header {
  margin-bottom: 40px;
  /* position: relative; */
}

aside {
  background-color: #f7f7f7;
  border-top: 5px solid #1098ad;
  border-bottom: 5px solid #1098ad;
  /* padding-top: 50px;
  padding-bottom: 50px; */
  padding: 50px 0;
  width: 500px;
}

/* SMALLER ELEMENTS */
h1,
h2,
h3 {
  color: #1098ad;
}

h1 {
  font-size: 26px;
  text-transform: uppercase;
  font-style: italic;
}

h2 {
  font-size: 40px;
  margin-bottom: 30px;
}

h3 {
  font-size: 30px;
  margin-bottom: 20px;
  margin-top: 40px;
}

h4 {
  font-size: 20px;
  text-transform: uppercase;
  text-align: center;
}

p {
  font-size: 22px;
  line-height: 1.5;
  margin-bottom: 15px;
}

ul,
ol {
  margin-left: 50px;
  margin-bottom: 20px;
}

li {
  font-size: 20px;
  margin-bottom: 10px;
  /* display: inline; */
}

li:last-child {
  margin-bottom: 0;
}

/* footer p {
  font-size: 16px;
} */

/* article header p {
  font-style: italic;
} */

#author {
  font-style: italic;
  font-size: 18px;
}

#copyright {
  font-size: 16px;
}

.related-author {
  font-size: 18px;
  font-weight: bold;
}

/* ul {
  list-style: none;
} */

.related {
  list-style: none;
}

body {
  /* background-color: orangered; */
}

/* .first-li {
  font-weight: bold;
} */

li:first-child {
  font-weight: bold;
}

li:last-child {
  font-style: italic;
}

li:nth-child(even) {
  /* color: red; */
}

/* Misconception: this won't work! */
article p:first-child {
  color: red;
}

/* Styling links */
a:link {
  color: #1098ad;
  text-decoration: none;
}

a:visited {
  /* color: #777; */
  color: #1098ad;
}

a:hover {
  color: orangered;
  font-weight: bold;
  text-decoration: underline orangered;
}

a:active {
  background-color: black;
  font-style: italic;
}
/* LVHA */

.post-img {
  width: 100%;
  height: auto;
}

nav a:link {
  /* background-color: orangered;
  margin: 20px;
  padding: 20px;

  display: block; */

  /* margin-right: 30px;
  margin-top: 10px; */
  display: inline-block;
}

nav a:link:last-child {
  margin-right: 0;
}

button {
  font-size: 22px;
  padding: 20px;
  cursor: pointer;

  position: absolute;
  /* top: 50px;
  left: 50px; */
  bottom: 50px;
  right: 50px;
}

h1::first-letter {
  font-style: normal;
  margin-right: 5px;
}

h3 + p::first-line {
  /* color: red; */
}

h2 {
  /* background-color: orange; */
  position: relative;
}

h2::before {
  content: "TOP";
  background-color: #ffe70e;
  color: #444;
  font-size: 16px;
  font-weight: bold;
  display: inline-block;
  padding: 5px 10px;
  position: absolute;
  top: -10px;
  right: -25px;
}

/* Resolving conflicts */
/* #copyright {
  color: red;
}

.copyright {
  color: blue;
}

.text {
  color: yellow;
}

footer p {
  color: green !important;
} */

/* nav a:link,
nav p {
  font-size: 18px;
} */

/* *FLEX BOX */

.main-header {
  display: flex;
  /* * whenever we have just two flex items and we want to push each of them to one side then the perfect thing to do is to use justify content 
  * so with justify-content: space-between this will basically take all the empty space and divide that as space between them*/
  justify-content: space-between;
}

.navigation {
  display: flex;
  gap: 30px;
  align-items: center;
}

.title-header {
  /* flex: 1; */
}

.main-content {
  display: flex;
  /* * we need to specify align-items: flex-start cuz by default it's stretch and it's tall as the tallest flex items
  * and now many times this is exactly the behavior that we want and before flexbox with just float layouts this kind of layout was actually almost impossible to achieve with CSS alone but now it's very easy it's even happen by default
  ! just imagine if we use float for 3 element and set 2 element height for the tallest element so it's also achieve this right? no it doesn't, if the content of the tallest element grow and that time the height change how to can change the height of rest elements? so go to change manually but it's not good and so hard to maintain  */
  align-items: flex-start;
  gap: 75px;
  margin-bottom: 60px;
}

/* ! now habing to do all this math kind of defeats(pha vo) the purpose of using flexbox in the first place maybe we just want the site to be really this size but then the article maybe we can allow flexbox to automatically figure out its size
* so usually what we do in this situation is to simply set flex to 1 which will then automatically allow this element to grow as much as it can in the available space */
article {
  /* flex: 0 0 825px; */
  flex: 1;
  /* ! we dont specify the aside to flex: 1 why because that time article and aside will grow and occupy the space in the same so it's not what we want
  * therefore we should specify fixed width for one element and use flex:1 for other element */
  margin-bottom: 0;
  /* * we should remove this margin-bottom here and add this for main-content because now it's container of article and aside right */
}

/* 
* so we need a container for p element and image of author
? and now what should be the flex container
? or in other word what parent element of these two element here makes sense to become the flex container?
* so we should new div and that is author-info, and because we need to set two element side by side so we need to set to the flex container rights
*/
.author-info {
  display: flex;
  gap: 30px;
  align-items: center;
  margin-bottom: 30px;
}

.author {
  margin-bottom: 0;
  /* align-items: center; */
  /* margin-top: 20px; */
}

aside {
  /*! flex: flex-grow, flex-shrinkm flex-basis */
  /* * so why we use flex shrink 0 because if not it'll automatically shrink to fit with dimession of container and if we only specify flex-basis: 300px it might not 300px right 
  * and we also want flex-grow: 0 why? because we need some space between them and if flex-grow: 1 it'll automatically fill out all remaining space of container*/
  flex: 0 0 300px;
}

.related-header {
  margin-bottom: 20px;
}

.related {
  margin-left: 40px;
}

.related-post {
  display: flex;
  align-items: center;
  /* ! perfect use gap property to set space between flex items element  when manipulate with flexbox and not use margin or padding
  * problem here if you use the old version of CSS maybe we don't see this gap property because it's maybe release in 2021 so that time if you work with old CSS version use margin */
  gap: 20px;
  width: 220px;
  margin-bottom: 30px;
  /* line-height: 1; */
}

/* ! keep in mind and never forget when we manipulate with links(hyperliks) anchor element we always use pseudo class link to only select anchor elements have the link(href property) */
.related-link:link {
  display: block;
  font-weight: bold;
  font-style: normal;
  font-size: 17px;
  align-self: center;
  margin-top: 10px;
  margin-bottom: 5px;
}

.related-author {
  margin-bottom: 0;
  font-weight: normal;
  font-size: 14px;
  font-style: italic;
}
